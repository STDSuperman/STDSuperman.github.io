(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{435:function(t,a,s){"use strict";s.r(a);var e=s(27),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在正式进入"),s("code",[t._v("RxJS")]),t._v("的世界之前，我们首先需要明确和了解几个概念：")]),t._v(" "),s("ul",[s("li",[t._v("响应式编程（"),s("code",[t._v("Reactive Programming")]),t._v("）")]),t._v(" "),s("li",[t._v("流（"),s("code",[t._v("Stream")]),t._v("）")]),t._v(" "),s("li",[t._v("观察者模式（发布订阅）")]),t._v(" "),s("li",[t._v("迭代器模式")])]),t._v(" "),s("h3",{attrs:{id:"响应式编程（reactive-programming）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应式编程（reactive-programming）"}},[t._v("#")]),t._v(" 响应式编程（Reactive Programming）")]),t._v(" "),s("p",[t._v("响应式编程（"),s("code",[t._v("Reactive Programming")]),t._v("），它是一种基于事件的模型。在上面的异步编程模式中，我们描述了两种获得上一个任务执行结果的方式，一个就是主动轮训，我们把它称为 "),s("code",[t._v("Proactive")]),t._v(" 方式。另一个就是被动接收反馈，我们称为 "),s("code",[t._v("Reactive")]),t._v("。简单来说，在 "),s("code",[t._v("Reactive")]),t._v(" 方式中，上一个任务的结果的反馈就是一个事件，这个事件的到来将会触发下一个任务的执行。")]),t._v(" "),s("p",[t._v("响应式编程的思路大概如下：你可以用包括 "),s("code",[t._v("Click")]),t._v(" 和 "),s("code",[t._v("Hover")]),t._v(" 事件在内的任何东西创建 "),s("code",[t._v("Data stream")]),t._v("（也称“流”，后续章节详述）。"),s("code",[t._v("Stream")]),t._v(" 廉价且常见，任何东西都可以是一个 "),s("code",[t._v("Stream")]),t._v("：变量、用户输入、属性、"),s("code",[t._v("Cache")]),t._v("、数据结构等等。举个例子，想像一下你的 "),s("code",[t._v("Twitter feed")]),t._v(" 就像是 "),s("code",[t._v("Click events")]),t._v(" 那样的 "),s("code",[t._v("Data stream")]),t._v("，你可以监听它并相应的作出响应。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s3.ax1x.com/2020/12/19/rNx0De.png",alt:"响应式编程"}})]),t._v(" "),s("p",[t._v("结合实际，如果你使用过"),s("code",[t._v("Vue")]),t._v("，必然能够第一时间想到，"),s("code",[t._v("Vue")]),t._v("的设计理念不也是一种响应式编程范式么，我们在编写代码的过程中，只需要关注数据的变化，不必手动去操作视图改变，这种"),s("code",[t._v("Dom")]),t._v("层的修改将随着相关数据的改变而自动改变并重新渲染。")]),t._v(" "),s("h3",{attrs:{id:"流（stream）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流（stream）"}},[t._v("#")]),t._v(" 流（"),s("code",[t._v("Stream")]),t._v("）")]),t._v(" "),s("p",[t._v("流作为概念应该是语言无关的。文件"),s("code",[t._v("IO")]),t._v("流，"),s("code",[t._v("Unix")]),t._v("系统标准输入输出流，标准错误流("),s("code",[t._v("stdin")]),t._v(", "),s("code",[t._v("stdout")]),t._v(", "),s("code",[t._v("stderr")]),t._v(")，还有一开始提到的 "),s("code",[t._v("TCP")]),t._v(" 流，还有一些 "),s("code",[t._v("Web")]),t._v(" 后台技术（如"),s("code",[t._v("Nodejs")]),t._v("）对"),s("code",[t._v("HTTP")]),t._v("请求/响应流的抽象，都可以见到流的概念。")]),t._v(" "),s("p",[t._v("作为响应式编程的核心，流的本质是一个按时间顺序排列的进行中事件的序列集合。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hijiangtao.github.io/assets/in-post/2020-01-13-Introduction-of-RxJS-Stream-Multiple-Click-Event-Example.png",alt:"流"}})]),t._v(" "),s("p",[t._v("对于一流或多个流来说，我们可以对他们进行转化，合并等操作，生成一个新的流，在这个过程中，流是不可改变的，也就是只会在原来的基础返回一个新的"),s("code",[t._v("stream")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"观察者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[t._v("#")]),t._v(" 观察者模式")]),t._v(" "),s("p",[t._v("在众多设计模式中，观察者模式可以说是在很多场景下都有着比较明显的作用。")]),t._v(" "),s("blockquote",[s("p",[t._v("观察者模式是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。")])]),t._v(" "),s("p",[t._v("用实际的例子来理解，就比如你订了一个银行卡余额变化短信通知的服务，那么这个时候，每次只要你转账或者是购买商品在使用这张银行卡消费之后，银行的系统就会给你推送一条短信，通知你消费了多少多少钱，这种其实就是一种观察者模式，又称发布-订阅模式。")]),t._v(" "),s("p",[t._v("在这个过程中，银行卡余额就是被观察的对象，而用户就是观察者。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s3.ax1x.com/2020/12/19/rUpS91.png",alt:"观察者模式"}})]),t._v(" "),s("p",[t._v("优点：")]),t._v(" "),s("ul",[s("li",[t._v("降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。")]),t._v(" "),s("li",[t._v("符合依赖倒置原则。")]),t._v(" "),s("li",[t._v("目标与观察者之间建立了一套触发机制。")]),t._v(" "),s("li",[t._v("支持广播通信")])]),t._v(" "),s("p",[t._v("不足：")]),t._v(" "),s("ul",[s("li",[t._v("目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。")]),t._v(" "),s("li",[t._v("当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。")])]),t._v(" "),s("h3",{attrs:{id:"迭代器模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式"}},[t._v("#")]),t._v(" 迭代器模式")]),t._v(" "),s("p",[t._v("迭代器（"),s("code",[t._v("Iterator")]),t._v("）模式又叫游标（"),s("code",[t._v("Sursor")]),t._v("）模式，在面向对象编程里，迭代器模式是一种设计模式，是一种最简单也最常见的设计模式。迭代器模式可以把迭代的过程从从业务逻辑中分离出来，它可以让用户透过特定的接口巡访容器中的每一个元素而不用了解底层的实现。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s3.ax1x.com/2020/12/19/rU9XWR.png",alt:"迭代器模式"}})]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iterable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iterator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iterable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\niterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => { value: "1", done: false}')]),t._v("\niterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => { value: "2", done: false}')]),t._v("\niterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => { value: "3", done: false}')]),t._v("\niterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => { value: undefined, done: true}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("作为前端开发者来说，我们最常遇到的部署了"),s("code",[t._v("iterator")]),t._v("接口的数据结构不乏有："),s("code",[t._v("Map")]),t._v("、"),s("code",[t._v("Set")]),t._v("、"),s("code",[t._v("Array")]),t._v("、类数组等等，我们在使用他们的过程中，均能使用同一个接口访问每个元素就是运用了迭代器模式。")]),t._v(" "),s("p",[s("code",[t._v("Iterator")]),t._v("作用：")]),t._v(" "),s("ul",[s("li",[t._v("为各种数据结构，提供一个统一的、简便的访问接口；")]),t._v(" "),s("li",[t._v("使得数据结构的成员能够按某种次序排列；")]),t._v(" "),s("li",[t._v("为新的遍历语法 "),s("code",[t._v("for...of")]),t._v(" 实现循环遍历")])]),t._v(" "),s("blockquote",[s("p",[t._v("在许多文章中，有人会喜欢把迭代器和遍历器混在一起进行概念解析，其实他们表达的含义是一致的，或者可以说（迭代器等于遍历器)。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);