(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{428:function(s,a,t){"use strict";t.r(a);var n=t(27),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"graphql从入门到起飞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graphql从入门到起飞"}},[s._v("#")]),s._v(" GraphQL从入门到起飞")]),s._v(" "),t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),t("p",[t("strong",[s._v("一种用于"),t("code",[s._v("API")]),s._v("的查询语言")])]),s._v(" "),t("blockquote",[t("p",[s._v("官网的介绍总是这么精辟，简单而粗暴。（这里还是要吐槽一句，官方文档真的太太太太不友好了）")])]),s._v(" "),t("p",[s._v("正如这句话所说，"),t("code",[s._v("GraphQL")]),s._v("是一种语言，一种用于"),t("code",[s._v("API")]),s._v("查询的语言。由"),t("code",[s._v("Facebook")]),s._v("开发，用以代替古老的"),t("code",[s._v("RESTful")]),s._v("架构，它允许你用陈述性语句描述你想要的数据，对于每一次请求而言，它总能返回可预测的结果。同时，它支持与多种语言进行一起使用，无论你是"),t("code",[s._v("JS")]),s._v("、"),t("code",[s._v("Java")]),s._v("还是"),t("code",[s._v("Go")]),s._v("...("),t("code",[s._v("And so on!")]),s._v(")，它都能给予稳定的支持，覆盖的语言很多。")]),s._v(" "),t("p",[t("code",[s._v("Facebook")]),s._v("开源了 "),t("code",[s._v("GraphQL")]),s._v(" 标准和其 "),t("code",[s._v("JavaScript")]),s._v(" 版本的实现。后来主要编程语言也实现了标准。此外，GraphQL 周边的生态不仅仅水平上扩展了不同语言的实现，并且还出现了在"),t("code",[s._v("GraphQL")]),s._v("基础上实现了类库（比如 "),t("code",[s._v("Apollo")]),s._v(" 和 "),t("code",[s._v("Relay")]),s._v("）。"),t("code",[s._v("GraphQL")]),s._v("目前被认为是革命性的"),t("code",[s._v("API")]),s._v("工具，因为它可以让客户端在请求中指定希望得到的数据，而不像传统的REST那样只能呆板地在服务端进行预定义。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://res.cloudinary.com/dyyck73ly/image/upload/v1487945540/pm42jugohtjb3t124syz.png",alt:"对比REST"}})]),s._v(" "),t("h2",{attrs:{id:"背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[s._v("#")]),s._v(" 背景")]),s._v(" "),t("p",[s._v("诚然，任何一种技术或者语言的诞生，必然有着它难以割舍的历史背景。")]),s._v(" "),t("p",[s._v("在"),t("code",[s._v("RESTful")]),s._v("架构横行的当下，我们在构建一个前后端项目的同时，几乎总能不假思索的确定服务端"),t("code",[s._v("API")]),s._v("的供给方式。当然，不得不肯定"),t("code",[s._v("RESTful")]),s._v("架构在经过这么多年的考验后依然能屹立不倒，必然拥有着不可或缺的价值所在。有利亦有弊，"),t("code",[s._v("RESTful")]),s._v("也存在或多或少的缺陷。在一个 "),t("code",[s._v("RESTful")]),s._v(" 架构下，因为后端开发人员定义在各个 "),t("code",[s._v("URL")]),s._v("的资源上返回的数据，而不是前端开发人员来提出数据需求，使得按需获取数据会非常困难。")]),s._v(" "),t("p",[s._v("从前后端交互角度来说，我们就请求一个接口来说，总会遇到某种场景，前端为了获取或修改到特定的数据需要传递很多个参数，伴随着项目的持续迭代，整个接口请求部分将会变得十分的臃肿且难以维护；不仅如此，如果存在服务端需要兼容多端的情况下，一个接口返回的数据可能会存在许许多多的赘余字段，甚至还可能存在这个页面仅仅只需要寥寥可数的几个字段，请求接口却返回了巨量的数据，从而导致网络带宽的浪费和服务端处理的速度。")]),s._v(" "),t("p",[s._v("对于前端依赖多个接口进行页面渲染的情况来说，几个相关的数据需要发起多个请求来满足需求，这显然是一种不太高效的行为。")]),s._v(" "),t("p",[s._v("从服务端维护的角度来说，对于多个接口，不管是否有存在接口字段重合的情况，我们总是需要编写接口独立的文档用以前端人员的使用，这在很多场景下是十分不友好的。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-1257398419.cos.ap-nanjing.myqcloud.com/GraphQL/gailan.png",alt:"概览"}})]),s._v(" "),t("h2",{attrs:{id:"优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[s._v("#")]),s._v(" 优势")]),s._v(" "),t("h3",{attrs:{id:"渐进式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渐进式"}},[s._v("#")]),s._v(" 渐进式")]),s._v(" "),t("p",[s._v("采用 "),t("code",[s._v("GraphQL")]),s._v(" 并不需要将现有技术栈全部一步推翻，正如你计划从一个单体后端应用迁移到一个微服务架构上，这将是很好的一个机会去引入"),t("code",[s._v("GraphQL API")]),s._v("。当你的团队拥有多个微服务时，你的团队可以采用"),t("code",[s._v("GraphQL")]),s._v("聚合"),t("code",[s._v("Schema")]),s._v("的方式来集成一个 "),t("code",[s._v("GraphQL")]),s._v(" 网关（"),t("code",[s._v("gateway")]),s._v("）。你可以通过将所有现有的"),t("code",[s._v("API")]),s._v("通过一个"),t("code",[s._v("API")]),s._v("网关不断一步一步汇集到一起，逐步完成到 "),t("code",[s._v("GraphQL")]),s._v(" 的迁移。通过这种方式，你可以以较小的代价进行"),t("code",[s._v("GraphQL")]),s._v("架构的接入。")]),s._v(" "),t("h3",{attrs:{id:"版本管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#版本管理"}},[s._v("#")]),s._v(" 版本管理")]),s._v(" "),t("p",[s._v("在传统的"),t("code",[s._v("RESTful")]),s._v("架构中，我们的接口迭代往往伴随着多个"),t("code",[s._v("API")]),s._v("的版本切换（api.domain.com/v1/、api.domain.com/v2/），甚至存在新旧接口共存的情况，在许多情况下前端人员在调用不同接口的时候并没有意识到接口已经处于废弃的阶段，以及新接口的结构的转变，这对于一个项目的长期维护来说必然是存在隐患的。")]),s._v(" "),t("p",[s._v("而对于"),t("code",[s._v("GraphQL")]),s._v("来说，它可以精确到字段级别的废弃，且在前端人员进行使用的时候可以得到良好的提示，你可以灵活的进行各项接口字段的废弃和新增，而调用方能够实时得到同步，这无疑是一种比较友好的交互方式。")]),s._v(" "),t("h3",{attrs:{id:"强类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强类型"}},[s._v("#")]),s._v(" 强类型")]),s._v(" "),t("p",[t("code",[s._v("GraphQL")]),s._v(" 是一门强类型的查询语言，因为它是通过 "),t("code",[s._v("GraphQL Schema Definition Language")]),s._v("（"),t("code",[s._v("SDL")]),s._v("）书写的。在这一点上，我们可以对比"),t("code",[s._v("ts")]),s._v("与"),t("code",[s._v("js")]),s._v("的爱恨情仇，强校验对于代码的可维护性来说无疑是意义重大的。"),t("code",[s._v("GraphQL")]),s._v("配合一定编辑器插件不仅能够提供良好的书写提示，还能对代码进行一定的错误检测，能避免一些常见的语法错误。")]),s._v(" "),t("h3",{attrs:{id:"接口健壮性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口健壮性"}},[s._v("#")]),s._v(" 接口健壮性")]),s._v(" "),t("p",[s._v("不再因为后端修改了接口的字段而没有同步前端的情况下导致前端调用出错，然后花费一定时间与后端"),t("code",[s._v("Battle")]),s._v("，这将是十分不友好的行为。为什么说"),t("code",[s._v("GraphQL")]),s._v("就能保证这一点呢，因为该标准下的面向前端的接口都有强类型的校验，完整的类型定义对前端透明，一旦出现前端进行"),t("code",[s._v("query")]),s._v("操作与后端接口定义不符，就能快速感知错误。")]),s._v(" "),t("h3",{attrs:{id:"声明式查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#声明式查询"}},[s._v("#")]),s._v(" 声明式查询")]),s._v(" "),t("p",[s._v("正如简介所述，"),t("code",[s._v("GraphQL")]),s._v("是一种"),t("code",[s._v("API")]),s._v("查询语言，同时它也是一种声明式的查询语言。客户端可以按照业务需要，通过声明式的方式获取数据。在一次接口调用中，我们可以定义我们想要的字段，服务端将按照用户需要返回特定的字段数据，不多不少，正正好好。在这个过程中，客户端与服务端的关系清晰，客户端只需要关注它需要什么数据，而服务端对自己的数据结构有明确的认知，同时对于每一个字段的数据获取方式有确定的渠道（微服务、数据库、第三方"),t("code",[s._v("API")]),s._v("），各司其职。")]),s._v(" "),t("h3",{attrs:{id:"无数据溢出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无数据溢出"}},[s._v("#")]),s._v(" 无数据溢出")]),s._v(" "),t("p",[s._v("它的声明式查询带给了客户端按需获取的能力，每一次的交互只会传输需要用到的字段，不会造成"),t("code",[s._v("RESTful")]),s._v("架构中出现的无关数据大量溢出的情况。")]),s._v(" "),t("blockquote",[t("p",[s._v("就社区生态而言，由"),t("code",[s._v("Facebook")]),s._v("维护，我们熟知的"),t("code",[s._v("github")]),s._v("、"),t("code",[s._v("Twitter")]),s._v("也加入了"),t("code",[s._v("GraphQL")]),s._v("的行列。")])]),s._v(" "),t("h2",{attrs:{id:"不足"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不足"}},[s._v("#")]),s._v(" 不足")]),s._v(" "),t("h3",{attrs:{id:"复杂查询问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复杂查询问题"}},[s._v("#")]),s._v(" 复杂查询问题")]),s._v(" "),t("h4",{attrs:{id:"现象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#现象"}},[s._v("#")]),s._v(" 现象")]),s._v(" "),t("p",[s._v("提到这一点，就不得不说起"),t("code",[s._v("N+1")]),s._v("的问题了，那么什么是"),t("code",[s._v("N+1")]),s._v("问题呢？举个栗子：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-1257398419.cos.ap-nanjing.myqcloud.com/GraphQL/N%2B1.png",alt:"数据库映射关系"}})]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" allUser "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nallUser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("item")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("queryScore")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("item"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("正如上述代码表述，假设数据库设计中用户与用户的成绩分别属于两个表，首先我会需要先拿到包含所有用户"),t("code",[s._v("id")]),s._v("和"),t("code",[s._v("name")]),s._v("的数据，然后通过用户的"),t("code",[s._v("id")]),s._v('去查询用户的成绩，而上述的代码的执行将会导致明明一次查表就能解决的问题，在这里却需要进行"N +1"次操作才能完成，这显然是十分不友好的。')]),s._v(" "),t("p",[s._v("虽然说这不仅仅只有"),t("code",[s._v("GraphQL")]),s._v("才会造成的问题，但是在一定程度上它相较于"),t("code",[s._v("RESTful")]),s._v("更容易出现。这里其实主要会与"),t("code",[s._v("GraphQL")]),s._v("的逐层解析方式所造成的，正如官网所描述的：")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("GraphQL")]),s._v(" 查询中的每个字段视为返回子类型的父类型函数或方法。事实上，这正是 "),t("code",[s._v("GraphQL")]),s._v(" 的工作原理。每个类型的每个字段都由一个"),t("code",[s._v("*resolver*")]),s._v("函数支持，该函数由 "),t("code",[s._v("GraphQL")]),s._v(" 服务器开发人员提供。当一个字段被执行时，相应的 "),t("code",[s._v("*resolver*")]),s._v("被调用以产生下一个值。")]),s._v(" "),t("p",[s._v("如果字段产生标量值，例如字符串或数字，则执行完成。如果一个字段产生一个对象，则该查询将继续执行该对象对应字段的解析器，直到生成标量值。"),t("code",[s._v("GraphQL")]),s._v("查询始终以标量值结束。")])]),s._v(" "),t("h4",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[s._v("#")]),s._v(" 解决方案")]),s._v(" "),t("p",[s._v("对于关系型数据库而言：")]),s._v(" "),t("ol",[t("li",[s._v("针对"),t("strong",[s._v("一对一")]),s._v("的关系（比如上面举例中提到的这个 "),t("code",[s._v("User")]),s._v(" 与 "),t("code",[s._v("UserScore")]),s._v(" 的关系），在从数据库里抓取数据时，就将所需数据 "),t("code",[s._v("join")]),s._v(" 到一张表里。")]),s._v(" "),t("li",[s._v("针对"),t("strong",[s._v("多对一或者多对多")]),s._v("的关系，你就要用到一个叫做 "),t("code",[s._v("**DataLoader**")]),s._v(" 的工具库了。其中，"),t("code",[s._v("Facebook")]),s._v(" 为 "),t("code",[s._v("Node.js")]),s._v(" 社区提供了 "),t("a",{attrs:{href:"https://github.com/facebook/dataloader",target:"_blank",rel:"noopener noreferrer"}},[s._v("DataLoader 的实现"),t("OutboundLink")],1),s._v("。"),t("code",[s._v("DataLoader")]),s._v("的主要功能是 "),t("code",[s._v("batching & caching")]),s._v("，可以将多次数据库查询的请求合并为一个，同时已经加载过的数据可以直接从 "),t("code",[s._v("DataLoader")]),s._v("的缓存空间中获取到，这样就能处理这种复杂请求的问题了。")])]),s._v(" "),t("h3",{attrs:{id:"缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[s._v("#")]),s._v(" 缓存")]),s._v(" "),t("p",[s._v("一个简单缓存，相比 "),t("code",[s._v("RESTful")]),s._v("，在"),t("code",[s._v("GraphQL")]),s._v(" 中实现会变得比较复杂。在 "),t("code",[s._v("RESTful")]),s._v(" 中你通过 "),t("code",[s._v("URL")]),s._v(" 访问资源，因此你可以在资源级别实现缓存，因为资源使用 "),t("code",[s._v("URL")]),s._v(" 作为其标识符。在 "),t("code",[s._v("GraphQL")]),s._v(" 中就复杂了，因为即便它操作的是同一个实体，每个查询都各不相同。比如，一个查询中，你可能只会请求一个作者的名字，但是在另外一次查询中你可能也想知道他的电子邮箱地址。这就需要你有一个更加健全的机制中来确保字段级别的缓存，实现起来并不简单。不过，多数基于 "),t("code",[s._v("GraphQL")]),s._v("构建的类库都提供了开箱即用的缓存机制，比如"),t("code",[s._v("Apollo")]),s._v("的缓存能力，它对于前端来说在一定程度上相比于"),t("code",[s._v("RESTful")]),s._v("体验更好。")]),s._v(" "),t("p",[s._v("那么为什么"),t("code",[s._v("GraphQL")]),s._v("不能像传统的"),t("code",[s._v("RESTful")]),s._v("架构一样在服务端加个"),t("code",[s._v("Header")]),s._v("就行了（协商缓存、强缓存）,答案是因为"),t("code",[s._v("RESTful")]),s._v("的"),t("code",[s._v("URL")]),s._v("是唯一的，因此可以作为"),t("code",[s._v("KEY")]),s._v("轻松实现缓存，而"),t("code",[s._v("GraphQL")]),s._v("本身只有一个"),t("code",[s._v("URL")]),s._v("，他的查询本质上是通过传"),t("code",[s._v("Schema")]),s._v("参数来实现数据获取或修改的，所以无法按旧有方式来实现缓存能力。")]),s._v(" "),t("h4",{attrs:{id:"解决方案-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-2"}},[s._v("#")]),s._v(" 解决方案")]),s._v(" "),t("p",[s._v("这里以"),t("code",[s._v("Apollo Client")]),s._v("为例，它为我们提供了缓存策略的可控机制：")]),s._v(" "),t("h5",{attrs:{id:"cache-first"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-first"}},[s._v("#")]),s._v(" cache-first")]),s._v(" "),t("p",[s._v("缓存优先，顾名思义，在发起请求时先查看是否命中缓存，如果命中则直接返回数据，如果没有则发起一次网络请求获取数据，并更新缓存。")]),s._v(" "),t("h5",{attrs:{id:"cache-and-network"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-and-network"}},[s._v("#")]),s._v(" cache-and-network")]),s._v(" "),t("p",[s._v("该策略所匹配的规则如下：")]),s._v(" "),t("p",[s._v("获取数据时，先检查缓存是否命中，如果命中，同理直接返回，但与缓存优先不同的是，不管缓存是否命中，它都会发起一次网络请求来更新缓存，如果前者没有命中缓存也就是还没有返回数据，那么请求完成之后再返回数据。这种方式的好处在于能够保证缓存数据的实时性。")]),s._v(" "),t("h5",{attrs:{id:"network-only"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#network-only"}},[s._v("#")]),s._v(" network-only")]),s._v(" "),t("p",[s._v("仅仅走网络方式，不走缓存。这种就比较简单了，也就是对于任何请求，它不会检查缓存是否命中，直接发起请求，获取最新数据。")]),s._v(" "),t("h5",{attrs:{id:"cache-only"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-only"}},[s._v("#")]),s._v(" cache-only")]),s._v(" "),t("p",[s._v("与"),t("code",[s._v("network-only")]),s._v("恰恰相反，这种方式只会检查是否在缓存中，如果获取的数据没在缓存则会抛出错误。如果需要给用户一直显示同个数据而忽略服务端的变化时，或者在离线访问时，这个策略就非常有用了。")]),s._v(" "),t("h5",{attrs:{id:"no-cache"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#no-cache"}},[s._v("#")]),s._v(" no-cache")]),s._v(" "),t("p",[s._v("同样的，从命名上就能知道该缓存的能力在于所有请求都走网络，不检查缓存，且请求到数据后也不进行数据缓存，如果你的数据只需要最新的，可以采用该方案。")]),s._v(" "),t("p",[s._v("对于策略的设置方式来说，你既可以为整个应用设置"),t("code",[s._v("fetch policy")]),s._v("，也可以单独为某个"),t("code",[s._v("query")]),s._v("设置，至于使用哪种策略，这就需要你根据项目的实际需要来决定了，如果你不设置特定策略，那么"),t("code",[s._v("Apollo")]),s._v("默认会采用"),t("code",[s._v("cache-first")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[s._v("#")]),s._v(" 核心概念")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-1257398419.cos.ap-nanjing.myqcloud.com/GraphQL/core.png",alt:"核心概念"}})]),s._v(" "),t("h3",{attrs:{id:"schema"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#schema"}},[s._v("#")]),s._v(" Schema")]),s._v(" "),t("p",[s._v("用于定义数据模型的结构、字段的类型、模型间的关系，可以说是属于"),t("code",[s._v("GraphQL")]),s._v("的核心。它其实就跟"),t("code",[s._v("Typescript")]),s._v("很像，你在用的过程中就会发现，几乎只要你熟悉"),t("code",[s._v("ts")]),s._v("，使用"),t("code",[s._v("Schema")]),s._v("进行类型定义的时候会如鱼得水。")]),s._v(" "),t("p",[s._v("类型系统最终的目的主要是用来定义对象属性的形状，比如某个类型明确表示了对象中这个字段必须是"),t("code",[s._v("Int")]),s._v("类型那么在返回数据时该字段你就就必须返回整型。")]),s._v(" "),t("h4",{attrs:{id:"标量类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标量类型"}},[s._v("#")]),s._v(" 标量类型")]),s._v(" "),t("p",[s._v("这个可以类比于我们"),t("code",[s._v("typescript")]),s._v("的原始类型。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Int")]),s._v("：有符号 32 位整数。")]),s._v(" "),t("li",[t("code",[s._v("Float")]),s._v("：有符号双精度浮点值。")]),s._v(" "),t("li",[t("code",[s._v("String")]),s._v("：UTF‐8 字符序列。")]),s._v(" "),t("li",[t("code",[s._v("Boolean")]),s._v("："),t("code",[s._v("true")]),s._v(" 或者 "),t("code",[s._v("false")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("ID")]),s._v("：ID 标量类型表示一个唯一标识符，通常用以重新获取对象或者作为缓存中的键。ID 类型使用和 String 一样的方式序列化；然而将其定义为 ID 意味着并不需要人类可读型。")])]),s._v(" "),t("p",[s._v("大部分的"),t("code",[s._v("GraphQL")]),s._v("服务实现中，都有自定义标量类型的方式。例如，我们可以定义一个 "),t("code",[s._v("Date")]),s._v(" 类型：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("scalar")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("然后就取决于我们的实现中如何定义将其序列化、反序列化和验证。例如，你可以指定 "),t("code",[s._v("Date")]),s._v(" 类型应该总是被序列化成整型时间戳，而客户端应该知道去要求任何 "),t("code",[s._v("date")]),s._v(" 字段都是这个格式。")]),s._v(" "),t("h4",{attrs:{id:"对象类型和字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象类型和字段"}},[s._v("#")]),s._v(" 对象类型和字段")]),s._v(" "),t("p",[s._v("在使用"),t("code",[s._v("GraphQL")]),s._v("来构建系统的过程中，最基本的组件就是对象类型，因为"),t("code",[s._v("GraphQL")]),s._v("架构本质上就是在获取某个对象上的字段。")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ObjectOne")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这就是一个最基本的对象类型，它描述了这个对象中各个字段的具体类型是什么，对象中当然也可以嵌套对象，正如我们使用"),t("code",[s._v("Javascript")]),s._v("对象一样。")]),s._v(" "),t("h4",{attrs:{id:"枚举类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型"}},[s._v("#")]),s._v(" 枚举类型")]),s._v(" "),t("p",[s._v("这个其实跟"),t("code",[s._v("ts")]),s._v("中的使用方式差不多，也称作"),t("strong",[s._v("枚举（enum）")]),s._v("，枚举类型是一种特殊的标量，它限制在一个特殊的可选值集合内，它同样被序列化为String。这让你能够：")]),s._v(" "),t("ol",[t("li",[s._v("验证这个类型的任何参数是可选值的的某一个")]),s._v(" "),t("li",[s._v("与类型系统沟通，一个字段总是一个有限值集合的其中一个值。")])]),s._v(" "),t("p",[s._v("定义方式如下：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Episode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ONE")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TWO")]),s._v("\n\tThree\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("也就是说，我们给某个属性定义成了"),t("code",[s._v("Episode")]),s._v("，那么他的返回值一定是枚举类型中定义的三个值之一。")]),s._v(" "),t("h4",{attrs:{id:"联合类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[s._v("#")]),s._v(" 联合类型")]),s._v(" "),t("p",[s._v("联合类型相当于一组类型的集合。")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n　　"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("wang")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Fish")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n　　"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("miao")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Cat "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Fish\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h4",{attrs:{id:"接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),t("p",[s._v("如果有接触过"),t("code",[s._v("ts")]),s._v("，那么这些概念可能对于你来说小菜一碟。方便查询时返回统一类型，接口是抽象的数据类型，因此只有接口的实现才有意义。")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dog")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("上面代码表示如果你的类型被定义成"),t("code",[s._v("Dog")]),s._v("，那么你返回的数据中就可能包含这"),t("code",[s._v("name")]),s._v("、"),t("code",[s._v("age")]),s._v("这两个属性（为什么用的是可能呢，因为这里没有添加必填标识符，后面会进行讲述）。")]),s._v(" "),t("h4",{attrs:{id:"列表和非空"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表和非空"}},[s._v("#")]),s._v(" 列表和非空")]),s._v(" "),t("p",[s._v("顾名思义，列表对应的就是用来描述一组数据而不是单个对象或单个字段，而非空类型相当于指定当前字段或者列表不得为空。")]),s._v(" "),t("p",[s._v("先看看他们分别长什么样（细心的同学会发现非空类型在上述代码中已经出现过了）：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("appearsIn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("从代码中我们可以看到，部分字段的类型后面加上了**!**，这个符号就是表示非空类型，如果加上了这个符号，那么这个字段就被标记为非空，如果被加在列表后面那么久表示这个列表不得为空也就是至少要有一个值。")]),s._v(" "),t("p",[s._v("一般我们都会用"),t("code",[s._v("[]")]),s._v("来表示这个字段是一个列表，然后在"),t("code",[s._v("[]")]),s._v("中标识集合中每个数据的类型。在这里我们非空标识符加在不同地方又会有不同的含义，下面会进行一一讲述：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这种方式表示就是列表内容可以为空，但是列表的每个项不得为空，这个代码中表示就是不得为空串。")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果是符号在"),t("code",[s._v("[]")]),s._v("的后面，那么就表示这个列表不得为空，也就是至少要有一个项或以上，但是可以包含空值成员。")]),s._v(" "),t("h4",{attrs:{id:"输入类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输入类型"}},[s._v("#")]),s._v(" 输入类型")]),s._v(" "),t("p",[s._v("一般来说我们都会有一个需求，我们需要传递一整个对象并且对象中包含了多个属性作为查询参数来获取数据，那么输入类型就是用来定义这个对象的形状的，它的定义方式和对象类型几乎一样，只不过定义的关键字是"),t("code",[s._v("input")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("input")]),s._v(" myInput "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这里主要用在客户端调用"),t("code",[s._v("Mutation")]),s._v("进行数据修改的时候会用到，具体的实例后面会进行详细分析，这里先理解一下。")]),s._v(" "),t("h3",{attrs:{id:"query"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#query"}},[s._v("#")]),s._v(" Query")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-1257398419.cos.ap-nanjing.myqcloud.com/GraphQL/query.png",alt:"工作流"}})]),s._v(" "),t("p",[s._v("从这里开始就准备开始接触实际的操作了，"),t("code",[s._v("Query")]),s._v("就对比于"),t("code",[s._v("RESTful")]),s._v("来说就类似于"),t("code",[s._v("Router")]),s._v("，它是作为入口提供给客户端调用查询数据的。")]),s._v(" "),t("p",[s._v("我们再来看看详细的定义方式：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Account")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("sex")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("salary")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("city")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Query")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("account")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("username")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Account\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("accounts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Account"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("blockquote",[t("p",[s._v("我们这里可以先忽略字段后面括号内容，这个属于"),t("code",[s._v("Argument")]),s._v("的内容，详细可以参考"),t("code",[s._v("Argument")]),s._v("部分。")])]),s._v(" "),t("p",[s._v("从代码中来看，这里定义了"),t("code",[s._v("Query")]),s._v("类型，它是作为查询入口而存在的，同时这个对象中定义了多个字段，这些字段将暴露给客户端进行查询返回，并且这些字段不限于标量类型联合类型等等，不仅如此，定义在"),t("code",[s._v("Query")]),s._v("中的这些字段都要有他们各自的"),t("code",[s._v("resolver")]),s._v("，因为这里只是定义了他们的结构，具体返回值和逻辑部分需要有特定的"),t("code",[s._v("resolver")]),s._v("来处理，具体参考下面"),t("code",[s._v("resolver")]),s._v("部分。")]),s._v(" "),t("p",[s._v("那么客户端又是怎么做到针对这些字段进行查询的呢？其实也很简单，直接按照他的结构进行一一对应查询即可，具体实现如下：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("query")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    account"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("username")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小李子"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        name\n        sex\n        age\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    name\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("如上所示，我们可以按照我们想要的字段进行查询，我们需要什么字段就在对应的结构中写上字段名，那么服务器接收到请求之后就会按照你想要的仅仅返回你定义的查询字段，其他的都不会返回。")]),s._v(" "),t("p",[s._v("这里有一个注意点，如果你的目标对象不是原始类型，而是一个对象，那么你必须标识你需要这个对象上的特定字段，也就是说必须精确到标量类型，否则就会出错，比如上面的"),t("code",[s._v("account")]),s._v("字段（这里忽略传参逻辑，后面会说），这个"),t("code",[s._v("account")]),s._v("对象定义的类型是"),t("code",[s._v("Account")]),s._v("，而"),t("code",[s._v("Account")]),s._v("类型具有"),t("code",[s._v("name")]),s._v("、"),t("code",[s._v("age")]),s._v("、"),t("code",[s._v("sex")]),s._v("、"),t("code",[s._v("salary")]),s._v("字段，那你在查询的时候，必须指定这个字段对象中的值，如果这个值还是对象，那你就还必须循环上述步骤直至拿到标量类型为止。")]),s._v(" "),t("h4",{attrs:{id:"argument"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#argument"}},[s._v("#")]),s._v(" Argument")]),s._v(" "),t("p",[s._v("关于参数，我们应该也很熟悉了，不就是类似于函数一样的传参。话虽如此，但是这里还是有点区别的。")]),s._v(" "),t("p",[s._v("我们从代码层次来看"),t("code",[s._v("GraphQL")]),s._v("中怎么实现传参的：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("salary")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("city")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("首先上面这个是在服务端定义结构的时候的写法，也比较好理解，也就是想要获取这个字段的值，那么你就必须传递这个参数（因为加了！，所以必须传），具体的这个参数怎么接收怎么处理，"),t("code",[s._v("Resolver")]),s._v("部分会提到，然后我们再来看客户端怎么进行查询传参的：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("query")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tsalary"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("city")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"上海"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("是不是也很好理解，只要参数名与你在服务端定义的参数名一致就可以了，然后后面给定具体的值。")]),s._v(" "),t("h3",{attrs:{id:"resolver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resolver"}},[s._v("#")]),s._v(" Resolver")]),s._v(" "),t("p",[s._v("对于"),t("code",[s._v("GraphQL")]),s._v("来说，它只有一个入口点，也就是根节点，查询一般都是从这个"),t("code",[s._v("Root")]),s._v("开始。")]),s._v(" "),t("p",[s._v("假设有这样一个"),t("code",[s._v("Schema")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserInfo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Query")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("userinfo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("userId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" UserInfo\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("而对应的客户端查询语句如下：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("query")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("userinfo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("userId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("666")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tname\n\t\tage\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("为了正常的响应给客户端这些字段的数据，那么我们就需要给特定的字段编写它的"),t("code",[s._v("resolver")]),s._v("。比如，上述的"),t("code",[s._v("userinfo")]),s._v("对应的实际数据其实就是由一个"),t("code",[s._v("resolver")]),s._v("进行处理返回的，一个"),t("code",[s._v("resolver")]),s._v("一般是一个对应的是一个函数，参数分别为：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("obj")]),s._v(" 代表上一个对象；")]),s._v(" "),t("li",[t("code",[s._v("args")]),s._v("　查询参数；")]),s._v(" "),t("li",[t("code",[s._v("context")]),s._v("　上下文，类似于"),t("code",[s._v("Koa")]),s._v("的"),t("code",[s._v("ctx")]),s._v("；")])]),s._v(" "),t("p",[s._v("那么如何编写上述"),t("code",[s._v("userinfo")]),s._v("字段的"),t("code",[s._v("resolver")]),s._v("呢：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[s._v("const root "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("userinfo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" function"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tconst userId "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" args.userId;\n\t\treturn "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" '李明' + userId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("这里忽略了这些数据的获取方式，直接写死的，而在实际项目中，这些字段的数据来源可以是数据库或者是其他"),t("code",[s._v("RPC")]),s._v("调用等等方式。同时我们应该也能注意到，我们在对需要传参的字段做处理的时候，直接可以从"),t("code",[s._v("args")]),s._v("中拿到对应的参数值，然后做逻辑处理返回。")]),s._v(" "),t("p",[s._v("在编写完"),t("code",[s._v("resolver")]),s._v("后，这个字段才能在查询的时候拿到对应的值。")]),s._v(" "),t("h3",{attrs:{id:"mutation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mutation"}},[s._v("#")]),s._v(" Mutation")]),s._v(" "),t("p",[s._v("在讲解完"),t("code",[s._v("Query")]),s._v("和"),t("code",[s._v("Resolver")]),s._v("之后，相信大家对基本的查询交互代码编写已经有所了解，那么现在就继续讲解怎么修改数据吧。")]),s._v(" "),t("p",[s._v("在开始讲解修改数据之前我们需要想想，如果我们需要修改某个用户的信息，我们是不是需要把新信息作为参数传递过去，那么这个参数类型势必就不是一个标量类型能够表示的了，所以就需要用到我们上面提到过的输入类型来进行传参。")]),s._v(" "),t("h4",{attrs:{id:"定义输入类型传参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义输入类型传参"}},[s._v("#")]),s._v(" 定义输入类型传参")]),s._v(" "),t("p",[s._v("首先先定义"),t("code",[s._v("schema")])]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Account")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("sex")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("salary")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("city")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("input")]),s._v(" AccountInput "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("sex")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mutation")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("createAccount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" AccountInput"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Account\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("blockquote",[t("p",[s._v("这里与"),t("code",[s._v("Query")]),s._v("不同的是，它的名字需要改成"),t("code",[s._v("Mutation")]),s._v("，"),t("code",[s._v("Query")]),s._v("与"),t("code",[s._v("Mutation")]),s._v("这两个名字是指定的，不能更改。")])]),s._v(" "),t("p",[s._v("我们从代码上看，其实和"),t("code",[s._v("Query")]),s._v("传参区别不大，唯一的区别在于参数的类型由之前的"),t("code",[s._v("String")]),s._v("变成现在了"),t("code",[s._v("AccountInput")]),s._v("，也就是从一个标量类型变成了一个对象类型，而定义输入类型的方式也从"),t("code",[s._v("type")]),s._v("变成了"),t("code",[s._v("input")]),s._v("。")]),s._v(" "),t("p",[s._v("然后再来看看客户端传参方式：")]),s._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mutation")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  createAccount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"李四"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("sex")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"女"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("其实这里和上述的传参方式没啥区别，唯一的不同就是类型的转变，这里变成了对象方式的传参。")]),s._v(" "),t("h3",{attrs:{id:"实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实战"}},[s._v("#")]),s._v(" 实战")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-1257398419.cos.ap-nanjing.myqcloud.com/GraphQL/practice.png",alt:"工作流"}})]),s._v(" "),t("h4",{attrs:{id:"server端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#server端"}},[s._v("#")]),s._v(" Server端")]),s._v(" "),t("p",[s._v("这里采用"),t("code",[s._v("express")]),s._v("进行演示，首先需要安装几个"),t("code",[s._v("npm")]),s._v("包：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" i express express-graphql graphql -S\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[t("code",[s._v("express")]),s._v("： 搭建服务")]),s._v(" "),t("li",[t("code",[s._v("express-graphql")]),s._v("： "),t("code",[s._v("graphql")]),s._v("相关中间件")]),s._v(" "),t("li",[t("code",[s._v("graphql")]),s._v("：核心包")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" express "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'express'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" graphqlHTTP "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'express-graphql'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" buildSchema "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'graphql'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" schema "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("buildSchema")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token template-string"}},[t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\n    type Account {\n        name: String\n        age: Int,\n        sex: String,\n        salary(city: String): Int\n    }\n\n    type Query {\n        name: String\n        age: Int,\n        account(username: String!): Account\n        accounts: [Account]\n    }\n\n    input AccountInput {\n        name: String\n        age: Int,\n        sex: String\n    }\n\n    type Mutation {\n        createAccount(input: AccountInput): Account\n    }\n")]),t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" root "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'陌路'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("account")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" username "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            sex"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'男'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("salary")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" city "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("city "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'上海'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createAccount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" input "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        db"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("accounts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" db"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("db"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" arr\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" db "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" app "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("express")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("use")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("express"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("static")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__dirname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/public'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("use")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/graphql'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("graphqlHTTP")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    schema"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    rootValue"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    graphiql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\napp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("listen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'listening port: 4000'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br")])]),t("p",[s._v("从上面的实例代码来看，这里主要分析一下流程逻辑：")]),s._v(" "),t("ol",[t("li",[s._v("编写"),t("code",[s._v("schema")]),s._v("，定义接口类型等。")]),s._v(" "),t("li",[s._v("编写"),t("code",[s._v("resolver")]),s._v("，代码中"),t("code",[s._v("root")]),s._v("对象中的一个个函数就是需要暴露给客户端调用查询的字段各自的"),t("code",[s._v("resolver")]),s._v("，用于处理如何返回数据")]),s._v(" "),t("li",[s._v("实例化一个"),t("code",[s._v("express")]),s._v("对象")]),s._v(" "),t("li",[s._v("添加相关中间件")]),s._v(" "),t("li",[s._v("启动服务")])]),s._v(" "),t("p",[s._v("有关于"),t("code",[s._v("express")]),s._v("相关的教程网上很多这里就不进行细说了，主要讲一下这个"),t("code",[s._v("graphqlHTTP")]),s._v("用到的几个配置项：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("schema")]),s._v("：就是我们上文提到的"),t("code",[s._v("schema")]),s._v("，不过这里需要先利用"),t("code",[s._v("buildSchema")]),s._v("处理一下用字符串编写的"),t("code",[s._v("schema")]),s._v("语句（可以说是语法糖）")]),s._v(" "),t("li",[t("code",[s._v("rootValue")]),s._v("：包含所有能被客户端访问到的字段的"),t("code",[s._v("resolver")]),s._v("对象")]),s._v(" "),t("li",[t("code",[s._v("graphiql")]),s._v("：本地调试工具，开发环境使用（巨好用）")])]),s._v(" "),t("p",[s._v("然后我们看看如何借助"),t("code",[s._v("graphiql")]),s._v("工具调试我们的服务吧：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-1257398419.cos.ap-nanjing.myqcloud.com/GraphQL/graphiql.png",alt:"调试界面"}})]),s._v(" "),t("p",[s._v("这里可见有中间两部分分别对应请求和响应，右侧还有一个侧边栏，相当于文档，如果这个字段是对象，还可以继续点进去看它包含的字段有哪些。")]),s._v(" "),t("p",[s._v("具体查询语句上文也有提到这里就不多赘述了，其实也很清晰了，你需要什么字段，就写上对应的字段名即可得到想要的响应。")]),s._v(" "),t("h4",{attrs:{id:"客户端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端"}},[s._v("#")]),s._v(" 客户端")]),s._v(" "),t("p",[s._v("上面我们介绍了如果使用本地调试工具进行接口调试，那么现在就来讲讲怎么在实际的浏览器端进行接口调用吧：")]),s._v(" "),t("div",{staticClass:"language-html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("script")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token script"}},[t("span",{pre:!0,attrs:{class:"token language-javascript"}},[s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("queryData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" query "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token template-string"}},[t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\n                query ($username: String!) {\n                    account(username: $username) {\n                        name\n                        sex\n                        age\n                    }\n                    age,\n                    name\n                }\n            ")]),t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fetch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/graphql'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                method"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'POST'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                headers"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Content-Type"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'application/json'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Accept"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'application/json'")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                body"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JSON")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("stringify")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                    variables"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        username"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"陌小路"')]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("res")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("json")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    ")])]),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("script")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("p",[s._v("同样先分析一下流程：")]),s._v(" "),t("ol",[t("li",[s._v("构建查询参数，也就是上述调试工具中我们写的查询语句，这里用字符串包裹起来，一般是使用模板字符串比较实用。")]),s._v(" "),t("li",[s._v("设置请求参数与请求头")]),s._v(" "),t("li",[s._v("发起请求")])]),s._v(" "),t("p",[s._v("对于请求参数这里再进行一下详细解析，首先需要给"),t("code",[s._v("body")]),s._v("传递一个被序列化的参数，内容包含：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("query")]),s._v("：查询语句")]),s._v(" "),t("li",[t("code",[s._v("variables")]),s._v("：语句中用到的请求参数")])]),s._v(" "),t("p",[s._v("这里可能就会有小伙伴懵逼了，这个查询语句中的"),t("code",[s._v("$username")]),s._v("是用来干嘛的，服务端也没有定义这个参数啊，其实这个"),t("code",[s._v("$username")]),s._v("就是用来对应我们在请求的时候传给"),t("code",[s._v("body")]),s._v("的"),t("code",[s._v("variables")]),s._v("对象中的"),t("code",[s._v("username")]),s._v("，只不过需要在前面加上一个"),t("code",[s._v("$")]),s._v("符号进行标识的。")]),s._v(" "),t("p",[s._v("这样整个前后端在"),t("code",[s._v("GraphQL")]),s._v("体系下的交互方式也差不多讲解完了。")]),s._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("总的来说，对于"),t("code",[s._v("GraphQL")]),s._v("这项技术未来是否能替代"),t("code",[s._v("RESTful")]),s._v("体系也不好说，只不过这相对于传统的"),t("code",[s._v("RESTful")]),s._v("架构是一种截然不同的概念，我们可以选择在新项目中进行尝鲜，也可以在老项目中进行架构调整，迁移到"),t("code",[s._v("GraphQL")]),s._v("，甚至可以两者皆存。这两种架构都有各自的优劣，我们可以根据我们自身的需求进行选择。总之，我相信"),t("code",[s._v("GraphQL")]),s._v("的发展潜力还是很大的，希望未来能将现存的不足进行更好的改进吧。")]),s._v(" "),t("blockquote",[t("p",[s._v("整理不易，跪求一赞😭。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);