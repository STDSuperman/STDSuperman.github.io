(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{426:function(s,t,a){"use strict";a.r(t);var n=a(27),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"query"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query"}},[s._v("#")]),s._v(" Query")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://blog-images-1257398419.cos.ap-nanjing.myqcloud.com/GraphQL/query.png",alt:"工作流"}})]),s._v(" "),a("p",[s._v("从这里开始就准备开始接触实际的操作了，"),a("code",[s._v("Query")]),s._v("就对比于"),a("code",[s._v("RESTful")]),s._v("来说就类似于"),a("code",[s._v("Router")]),s._v("，它是作为入口提供给客户端调用查询数据的。")]),s._v(" "),a("p",[s._v("我们再来看看详细的定义方式：")]),s._v(" "),a("div",{staticClass:"language-graphql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Account")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("sex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("salary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("city")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Query")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("account")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("username")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Account\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("accounts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Account"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("blockquote",[a("p",[s._v("我们这里可以先忽略字段后面括号内容，这个属于"),a("code",[s._v("Argument")]),s._v("的内容，详细可以参考"),a("code",[s._v("Argument")]),s._v("部分。")])]),s._v(" "),a("p",[s._v("从代码中来看，这里定义了"),a("code",[s._v("Query")]),s._v("类型，它是作为查询入口而存在的，同时这个对象中定义了多个字段，这些字段将暴露给客户端进行查询返回，并且这些字段不限于标量类型联合类型等等，不仅如此，定义在"),a("code",[s._v("Query")]),s._v("中的这些字段都要有他们各自的"),a("code",[s._v("resolver")]),s._v("，因为这里只是定义了他们的结构，具体返回值和逻辑部分需要有特定的"),a("code",[s._v("resolver")]),s._v("来处理，具体参考下面"),a("code",[s._v("resolver")]),s._v("部分。")]),s._v(" "),a("p",[s._v("那么客户端又是怎么做到针对这些字段进行查询的呢？其实也很简单，直接按照他的结构进行一一对应查询即可，具体实现如下：")]),s._v(" "),a("div",{staticClass:"language-graphql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("query")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    account"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("username")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小李子"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        name\n        sex\n        age\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("如上所示，我们可以按照我们想要的字段进行查询，我们需要什么字段就在对应的结构中写上字段名，那么服务器接收到请求之后就会按照你想要的仅仅返回你定义的查询字段，其他的都不会返回。")]),s._v(" "),a("p",[s._v("这里有一个注意点，如果你的目标对象不是原始类型，而是一个对象，那么你必须标识你需要这个对象上的特定字段，也就是说必须精确到标量类型，否则就会出错，比如上面的"),a("code",[s._v("account")]),s._v("字段（这里忽略传参逻辑，后面会说），这个"),a("code",[s._v("account")]),s._v("对象定义的类型是"),a("code",[s._v("Account")]),s._v("，而"),a("code",[s._v("Account")]),s._v("类型具有"),a("code",[s._v("name")]),s._v("、"),a("code",[s._v("age")]),s._v("、"),a("code",[s._v("sex")]),s._v("、"),a("code",[s._v("salary")]),s._v("字段，那你在查询的时候，必须指定这个字段对象中的值，如果这个值还是对象，那你就还必须循环上述步骤直至拿到标量类型为止。")]),s._v(" "),a("h4",{attrs:{id:"argument"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#argument"}},[s._v("#")]),s._v(" Argument")]),s._v(" "),a("p",[s._v("关于参数，我们应该也很熟悉了，不就是类似于函数一样的传参。话虽如此，但是这里还是有点区别的。")]),s._v(" "),a("p",[s._v("我们从代码层次来看"),a("code",[s._v("GraphQL")]),s._v("中怎么实现传参的：")]),s._v(" "),a("div",{staticClass:"language-graphql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("salary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("city")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("首先上面这个是在服务端定义结构的时候的写法，也比较好理解，也就是想要获取这个字段的值，那么你就必须传递这个参数（因为加了！，所以必须传），具体的这个参数怎么接收怎么处理，"),a("code",[s._v("Resolver")]),s._v("部分会提到，然后我们再来看客户端怎么进行查询传参的：")]),s._v(" "),a("div",{staticClass:"language-graphql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("query")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tsalary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("city")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"上海"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("是不是也很好理解，只要参数名与你在服务端定义的参数名一致就可以了，然后后面给定具体的值。")]),s._v(" "),a("h3",{attrs:{id:"resolver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resolver"}},[s._v("#")]),s._v(" Resolver")]),s._v(" "),a("p",[s._v("对于"),a("code",[s._v("GraphQL")]),s._v("来说，它只有一个入口点，也就是根节点，查询一般都是从这个"),a("code",[s._v("Root")]),s._v("开始。")]),s._v(" "),a("p",[s._v("假设有这样一个"),a("code",[s._v("Schema")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-graphql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserInfo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n\t"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Query")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("userinfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("userId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" UserInfo\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("而对应的客户端查询语句如下：")]),s._v(" "),a("div",{staticClass:"language-graphql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("query")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("userinfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("userId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("666")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tname\n\t\tage\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("为了正常的响应给客户端这些字段的数据，那么我们就需要给特定的字段编写它的"),a("code",[s._v("resolver")]),s._v("。比如，上述的"),a("code",[s._v("userinfo")]),s._v("对应的实际数据其实就是由一个"),a("code",[s._v("resolver")]),s._v("进行处理返回的，一个"),a("code",[s._v("resolver")]),s._v("一般是一个对应的是一个函数，参数分别为：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("obj")]),s._v(" 代表上一个对象；")]),s._v(" "),a("li",[a("code",[s._v("args")]),s._v("　查询参数；")]),s._v(" "),a("li",[a("code",[s._v("context")]),s._v("　上下文，类似于"),a("code",[s._v("Koa")]),s._v("的"),a("code",[s._v("ctx")]),s._v("；")])]),s._v(" "),a("p",[s._v("那么如何编写上述"),a("code",[s._v("userinfo")]),s._v("字段的"),a("code",[s._v("resolver")]),s._v("呢：")]),s._v(" "),a("div",{staticClass:"language-graphql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[s._v("const root "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("userinfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tconst userId "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" args.userId;\n\t\treturn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" '李明' + userId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("这里忽略了这些数据的获取方式，直接写死的，而在实际项目中，这些字段的数据来源可以是数据库或者是其他"),a("code",[s._v("RPC")]),s._v("调用等等方式。同时我们应该也能注意到，我们在对需要传参的字段做处理的时候，直接可以从"),a("code",[s._v("args")]),s._v("中拿到对应的参数值，然后做逻辑处理返回。")]),s._v(" "),a("p",[s._v("在编写完"),a("code",[s._v("resolver")]),s._v("后，这个字段才能在查询的时候拿到对应的值。")]),s._v(" "),a("h3",{attrs:{id:"mutation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutation"}},[s._v("#")]),s._v(" Mutation")]),s._v(" "),a("p",[s._v("在讲解完"),a("code",[s._v("Query")]),s._v("和"),a("code",[s._v("Resolver")]),s._v("之后，相信大家对基本的查询交互代码编写已经有所了解，那么现在就继续讲解怎么修改数据吧。")]),s._v(" "),a("p",[s._v("在开始讲解修改数据之前我们需要想想，如果我们需要修改某个用户的信息，我们是不是需要把新信息作为参数传递过去，那么这个参数类型势必就不是一个标量类型能够表示的了，所以就需要用到我们上面提到过的输入类型来进行传参。")]),s._v(" "),a("h4",{attrs:{id:"定义输入类型传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义输入类型传参"}},[s._v("#")]),s._v(" 定义输入类型传参")]),s._v(" "),a("p",[s._v("首先先定义"),a("code",[s._v("schema")])]),s._v(" "),a("div",{staticClass:"language-graphql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Account")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("sex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("salary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("city")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("input")]),s._v(" AccountInput "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("sex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mutation")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("createAccount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" AccountInput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Account\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("blockquote",[a("p",[s._v("这里与"),a("code",[s._v("Query")]),s._v("不同的是，它的名字需要改成"),a("code",[s._v("Mutation")]),s._v("，"),a("code",[s._v("Query")]),s._v("与"),a("code",[s._v("Mutation")]),s._v("这两个名字是指定的，不能更改。")])]),s._v(" "),a("p",[s._v("我们从代码上看，其实和"),a("code",[s._v("Query")]),s._v("传参区别不大，唯一的区别在于参数的类型由之前的"),a("code",[s._v("String")]),s._v("变成现在了"),a("code",[s._v("AccountInput")]),s._v("，也就是从一个标量类型变成了一个对象类型，而定义输入类型的方式也从"),a("code",[s._v("type")]),s._v("变成了"),a("code",[s._v("input")]),s._v("。")]),s._v(" "),a("p",[s._v("然后再来看看客户端传参方式：")]),s._v(" "),a("div",{staticClass:"language-graphql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mutation")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  createAccount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"李四"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("sex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"女"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("其实这里和上述的传参方式没啥区别，唯一的不同就是类型的转变，这里变成了对象方式的传参。")])])}),[],!1,null,null,null);t.default=e.exports}}]);