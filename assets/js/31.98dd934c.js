(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{425:function(a,s,t){"use strict";t.r(s);var n=t(27),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[a._v("#")]),a._v(" 核心概念")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-1257398419.cos.ap-nanjing.myqcloud.com/GraphQL/core.png",alt:"核心概念"}})]),a._v(" "),t("h3",{attrs:{id:"schema"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#schema"}},[a._v("#")]),a._v(" Schema")]),a._v(" "),t("p",[a._v("用于定义数据模型的结构、字段的类型、模型间的关系，可以说是属于"),t("code",[a._v("GraphQL")]),a._v("的核心。它其实就跟"),t("code",[a._v("Typescript")]),a._v("很像，你在用的过程中就会发现，几乎只要你熟悉"),t("code",[a._v("ts")]),a._v("，使用"),t("code",[a._v("Schema")]),a._v("进行类型定义的时候会如鱼得水。")]),a._v(" "),t("p",[a._v("类型系统最终的目的主要是用来定义对象属性的形状，比如某个类型明确表示了对象中这个字段必须是"),t("code",[a._v("Int")]),a._v("类型那么在返回数据时该字段你就就必须返回整型。")]),a._v(" "),t("h4",{attrs:{id:"标量类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标量类型"}},[a._v("#")]),a._v(" 标量类型")]),a._v(" "),t("p",[a._v("这个可以类比于我们"),t("code",[a._v("typescript")]),a._v("的原始类型。")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Int")]),a._v("：有符号 32 位整数。")]),a._v(" "),t("li",[t("code",[a._v("Float")]),a._v("：有符号双精度浮点值。")]),a._v(" "),t("li",[t("code",[a._v("String")]),a._v("：UTF‐8 字符序列。")]),a._v(" "),t("li",[t("code",[a._v("Boolean")]),a._v("："),t("code",[a._v("true")]),a._v(" 或者 "),t("code",[a._v("false")]),a._v("。")]),a._v(" "),t("li",[t("code",[a._v("ID")]),a._v("：ID 标量类型表示一个唯一标识符，通常用以重新获取对象或者作为缓存中的键。ID 类型使用和 String 一样的方式序列化；然而将其定义为 ID 意味着并不需要人类可读型。")])]),a._v(" "),t("p",[a._v("大部分的"),t("code",[a._v("GraphQL")]),a._v("服务实现中，都有自定义标量类型的方式。例如，我们可以定义一个 "),t("code",[a._v("Date")]),a._v(" 类型：")]),a._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("scalar")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("然后就取决于我们的实现中如何定义将其序列化、反序列化和验证。例如，你可以指定 "),t("code",[a._v("Date")]),a._v(" 类型应该总是被序列化成整型时间戳，而客户端应该知道去要求任何 "),t("code",[a._v("date")]),a._v(" 字段都是这个格式。")]),a._v(" "),t("h4",{attrs:{id:"对象类型和字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象类型和字段"}},[a._v("#")]),a._v(" 对象类型和字段")]),a._v(" "),t("p",[a._v("在使用"),t("code",[a._v("GraphQL")]),a._v("来构建系统的过程中，最基本的组件就是对象类型，因为"),t("code",[a._v("GraphQL")]),a._v("架构本质上就是在获取某个对象上的字段。")]),a._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObjectOne")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" String\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Int\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("这就是一个最基本的对象类型，它描述了这个对象中各个字段的具体类型是什么，对象中当然也可以嵌套对象，正如我们使用"),t("code",[a._v("Javascript")]),a._v("对象一样。")]),a._v(" "),t("h4",{attrs:{id:"枚举类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型"}},[a._v("#")]),a._v(" 枚举类型")]),a._v(" "),t("p",[a._v("这个其实跟"),t("code",[a._v("ts")]),a._v("中的使用方式差不多，也称作"),t("strong",[a._v("枚举（enum）")]),a._v("，枚举类型是一种特殊的标量，它限制在一个特殊的可选值集合内，它同样被序列化为String。这让你能够：")]),a._v(" "),t("ol",[t("li",[a._v("验证这个类型的任何参数是可选值的的某一个")]),a._v(" "),t("li",[a._v("与类型系统沟通，一个字段总是一个有限值集合的其中一个值。")])]),a._v(" "),t("p",[a._v("定义方式如下：")]),a._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("enum")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Episode")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ONE")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TWO")]),a._v("\n\tThree\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("也就是说，我们给某个属性定义成了"),t("code",[a._v("Episode")]),a._v("，那么他的返回值一定是枚举类型中定义的三个值之一。")]),a._v(" "),t("h4",{attrs:{id:"联合类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[a._v("#")]),a._v(" 联合类型")]),a._v(" "),t("p",[a._v("联合类型相当于一组类型的集合。")]),a._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Cat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n　　"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("wang")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" String"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Fish")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n　　"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("miao")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" String"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("union")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Cat "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" Fish\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("h4",{attrs:{id:"接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[a._v("#")]),a._v(" 接口")]),a._v(" "),t("p",[a._v("如果有接触过"),t("code",[a._v("ts")]),a._v("，那么这些概念可能对于你来说小菜一碟。方便查询时返回统一类型，接口是抽象的数据类型，因此只有接口的实现才有意义。")]),a._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" String\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" String\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Int\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("上面代码表示如果你的类型被定义成"),t("code",[a._v("Dog")]),a._v("，那么你返回的数据中就可能包含这"),t("code",[a._v("name")]),a._v("、"),t("code",[a._v("age")]),a._v("这两个属性（为什么用的是可能呢，因为这里没有添加必填标识符，后面会进行讲述）。")]),a._v(" "),t("h4",{attrs:{id:"列表和非空"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表和非空"}},[a._v("#")]),a._v(" 列表和非空")]),a._v(" "),t("p",[a._v("顾名思义，列表对应的就是用来描述一组数据而不是单个对象或单个字段，而非空类型相当于指定当前字段或者列表不得为空。")]),a._v(" "),t("p",[a._v("先看看他们分别长什么样（细心的同学会发现非空类型在前面代码中已经出现过了）：")]),a._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" String"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("appearsIn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("String"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("从代码中我们可以看到，部分字段的类型后面加上了**!**，这个符号就是表示非空类型，如果加上了这个符号，那么这个字段就被标记为非空，如果被加在列表后面那么久表示这个列表不得为空也就是至少要有一个值。")]),a._v(" "),t("p",[a._v("一般我们都会用"),t("code",[a._v("[]")]),a._v("来表示这个字段是一个列表，然后在"),t("code",[a._v("[]")]),a._v("中标识集合中每个数据的类型。在这里我们非空标识符加在不同地方又会有不同的含义，下面会进行一一讲述：")]),a._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("String"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("这种方式表示就是列表内容可以为空，但是列表的每个项不得为空，这个代码中表示就是不得为空串。")]),a._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("如果是符号在"),t("code",[a._v("[]")]),a._v("的后面，那么就表示这个列表不得为空，也就是至少要有一个项或以上，但是可以包含空值成员。")]),a._v(" "),t("h4",{attrs:{id:"输入类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输入类型"}},[a._v("#")]),a._v(" 输入类型")]),a._v(" "),t("p",[a._v("一般来说我们都会有一个需求，我们需要传递一整个对象并且对象中包含了多个属性作为查询参数来获取数据，那么输入类型就是用来定义这个对象的形状的，它的定义方式和对象类型几乎一样，只不过定义的关键字是"),t("code",[a._v("input")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-graphql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-graphql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("input")]),a._v(" myInput "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" String"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Int"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);